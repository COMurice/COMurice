enclave {
	from "../Enclave1/Enclave1.edl" import *;
	include "sgx_eid.h"
	include "../LocalAttestationCode/datatypes.h"
	trusted{
		public void ecall_compile(int cnt_argv,int cnt_env,[in,size=10000] int *length_argv,[in,count=1000] int *length_env, [in,count=1000000] char *all_argv,[in,count=1000000] char *all_env);
		};
	untrusted {
       		void fstatfs_ocall([in, out] int *preturn, int fd,[in,out,size=120] void *buf);
		void rename_ocall([in, out]int *preturn, [in, string]char *oldname, [in, string]char *newname);
		void posix_fallocate_ocall([in, out]int *preturn, int fd, int offset, int len);
		void ftruncate_ocall([in, out]int *preturn, int fd, int length);
		void __xstat_ocall([in, out]int *preturn, int __ver, [in, string]const char *__filename, [in,size=144]void *__stat_buf);
		void realpath_ocall([in, out]int *preturn, [in, string]const char *path, [in, out, string]char *resolved_path);
		void getcwd_ocall([in, out]int *preturn, [in, out, size = size]char *buf, size_t size,[in,out] int *in_errno);
		void lstat_ocall([in, out]int *preturn, [in, string]const char *path, [in,out,size=144]void *buf);
		void stat_ocall([in,out] int *preturn,[in,string] const char *path,[out,size=144] void *buf,[in,out]int *in_errno);
		void umask_ocall([in,out] int *preturn,int mask);
		void chmod_ocall([in,out] int *preturn,[in,string] const char * path,int mode);
		void fchmod_ocall([in,out] int *preturn,int fildes,int mode);
		void futimens_ocall([in,out]int *preturn,int fd,[in,size=32] void *times);
		void closedir_ocall([in,out] int *preturn,[in] void **dir,[in,out] int *in_errno);
		void readdir_ocall([in,out]int *preturn,[in] void ** dir,[in,out,size=584] void* readdir_tmp,[in,out]int *in_errno);
		void opendir_ocall([in,out]int *preturn,[in,string] const char *name,[out] void ** ret,[in,out]int *in_errno);
		void pread_ocall([in,out] int *preturn,int fd,[out,size=count] void *buf, size_t count, int offset,[in,out] int *in_errno);
		//void pread_ocall([in,out] int *preturn,int fd,void **buf, size_t count, int offset,[in,out] int *in_errno);
		void getuid_ocall([in,out] int *preturn);
		//void getpwuid_ocall(int uid,[in,out,size=48] void* getpwuid_tmp); // this format has some erros.
	 	//void getpwnam_ocall([in,string] const char *name,[in,out,size=48] void *getpwnam_tmp);
		void mallinfo_ocall([in,size=40] void *mallinfo_tmp);
		void getrusage_ocall([in,out] int *preturn,int who,[in,size=144] void *usage);
		void dup2_ocall([in,out] int *preturn,int odlfd, int newfd);
		void sigfillset_ocall([in,out] int *preturn,[in,size=128] void * set); // not sure posix_fallocate_ocall 
		void waitpid_ocall([in,out] int *preturn,int pid,[out] int *status_pid, int options,[in,out] int *in_errno);
		void alarm_ocall([in,out] int *preturn,unsigned int seconds);
		void strsignal_ocall(int sig,[in,out,string] char *strsignal_tmp);
		void kill_ocall([in,out] int *preturn,int pid, int sig);
		void wait_ocall ([in,out] int *preturn,[out] int * status_pid);
		void sysconf_ocall([in,out] int *preturn,int name);	// not sure execve_ocall 
		void fork_ocall([in,out] int *preturn);
		void sigaltstack_ocall([in,out] int *preturn,[in,size=24]const void *ss, [in,size=24] void *old_ss);
		void unlink_ocall([in,out] int *preturn ,[in,string] const char * pathname);
		void backtrace_ocall([in,out] int *preturn,[in,size=size] void **buffer, int size); // not sure @
		void sched_getaffinity_ocall([in,out] int *preturn ,int pid, unsigned int cpusetsize,[in,size=128] void *mask);
		void __sched_cpucount_ocall([in,out] int *preturn ,size_t setsize, [in,size=128] const void *setp);
      	        //void pthread_setschedparam_ocall([in,out] int *preturn , int target_thread, int policy, [in,size=4] const void *param); // @
		//void pthread_attr_init_ocall([in,out] int *preturn,[in] int *attr); // @
		//void pthread_attr_destroy_ocall([in,out] int *preturn,[in,out] int *attr); // @
		void __printf_chk_ocall([in,out] int *preturn,int flag, [in,string] const char * format);
		void localtime_ocall([in,size = 8] const void *timer,[in,size=56] void * localtime_tmp);
		void gettimeofday_ocall([in,out] int *preturn,[in,out,size=16] void * tv, [in,out,size = 8] void * tz,[in,out] int *in_errno);
		void aligned_alloc_ocall([in,out,size=size]void *preturn,size_t alignment, size_t size);
		void fwrite_ocall([in,out] int *preturn,[in,size=size]const void *ptr, size_t size, size_t nmemb,[in,size = 216] void *stream);
		void fputs_ocall([in,out] int *preturn,[in,string] const char *str, [in,size=216] void *stream);
		void fputc_ocall([in,out] int *preturn,int c, [in,out,size=216] void * stream);
		void write_ocall ([in,out] int *preturn ,int fd, [in,size=count] const void * buf, size_t count,[in,out]int *in_errno);
		void _strtof_l_ocall([in,out] float *preturn,[in,string] const char *strSource,[in] char **endptr,int locale);
		void _strtod_l_ocall([in,out] double *preturn,[in,string] const char *strSource,[in] char **endptr, int locale);
		void _strtold_l_ocall([in,out] long double *preturn,[in,string] const char *strSource,[in] char **endptr,int locale);
		void __newlocale_ocall ([in,out] int *preturn,int category_mask, [in,string] const char *locale, int base);
		void strdup_ocall([in,string] const char *s,[in,out,string] char * strdup_tmp);
		void bind_textdomain_codeset_ocall ([in,string] const char * domainname, [in,string] const char * codeset,[in,out,string] char *bind_textdomain_codeset_tmp);
		// dgettext
		void getenv_ocall([in,out]int *preturn,[in,string] const char* name,[out] void **ret);
		void _strcoll_l_ocall([in,out] int *preturn,[in,string] const char *string1,[in,string] const char *string2,int locale);
		void _strxfrm_l_ocall([in,out] int *preturn,[in,string] char *strDest,[in,string] const char *strSource,size_t count,int locale);
		void __wcscoll_l_ocall([in,out] int *preturn,[in,wstring] const wchar_t *string1,[in,wstring] const wchar_t *string2,int locale);
		void __wcsxfrm_l_ocall([in,out] int *preturn,[in,wstring] wchar_t *strDest,[in,wstring] const wchar_t *strSource, size_t count,int locale);
		void __ctype_get_mb_cur_max_ocall([in,out] int *preturn);
		void __errno_location_ocall([in,out]int *preturn);
		void fflush_ocall([in,out] int *preturn,[in,size = 1]void *stream);
		void fdopen_ocall(int fildes,[in,string] const char * mode,[in,out,size = 1] void *fdopen_tmp);
		void setvbuf_ocall([in,out] int *preturn,[in,size = 1] void *stream,[in,string] char *buffer, int mode, size_t size);
	        void fopen64_ocall([in,string] char *Path,[in,string] char *Type,[in,out,size = 1] void *fopen64_tmp);
		void fileno_ocall([in,out] int *preturn,[in,size = 1] void * stream);
		void fclose_ocall([in,out] int *preturn,[in] void **fp,[in,out] int *in_errno);
		void read_ocall([in,out] int *preturn,int fd, [in,size = count] void * buf, size_t count);
		void writev_ocall([in,out] int *preturn,int filedes,[in,out,size = 16] void *iov, int iovcnt);
		void lseek64_ocall([in,out] long long *preturn,int fd, long long offset, int whence,[in,out] int *in_errno);
		void poll_ocall([in,out] int *preturn,[in,size = nfds] void *fd, int nfds, int timeout);
		void __fxstat64_ocall([in,out] int *preturn,int ver, int fildes, [in,size = 144] void * stat_buf);
		void setlocale_ocall(int category, [in,string] const char *locale,[in,out,string]char *setlocale_tmp);
		void __strftime_l_ocall([in,out] int *preturn,[in,string] char *strDest,size_t maxsize,[in,string] const char *format,[in,size=1]const void *timeptr,int locale);
		void __wcsftime_l_ocall([in,out] int *preturn,[in,wstring] wchar_t *strDest,size_t maxsize,[in,wstring] const wchar_t *format,[in,size = 1] const void *timeptr,int locale);
		void __towupper_l_ocall([in,out] int *preturn, wint_t c ,int locale);
		void __towlower_l_ocall([in,out] int *preturn, wint_t c,int locale);
		void __iswctype_l_ocall([in,out] int *preturn,wint_t c,int desc,int locale);
		void bindtextdomain_ocall ([in,string] const char * domainname,[in,string] const char * dirname,[in,out,string] char *bindtextdomain_tmp);
		void get_nprocs_ocall([in,out] int *preturn);
		void nanosleep_ocall([in,out] int *preturn,[in,size = 16] const void *req,[in,size = 16] void *rem);
		void pthread_detach_ocall([in,out] int *preturn,int tid);
		void clock_gettime_ocall([in,out]  int *preturn,int clk_id,[in,size = 1] void *tp);
		void fopen_ocall([in,string ] const char *filename, [in,string] const char *mode,[out] void ** ret,[in,out] int *in_errno);
		void __fprintf_chk_ocall([in,out] int *preturn,[in,size = 1] void * stream, int flag, [in,string] const char * format);
		void getc_ocall([in,out] int *preturn,[in,size = 1] void *stream);
		void ungetc_ocall([in,out] int *preturn,int chr, [in,size = 1 ] void *stream);
		void putc_ocall([in,out] int *preturn,int chr, [in,size = 1] void *stream);
		void fseeko64_ocall([in,out] int *preturn,[in,size = 1] void *stream, int offset, int fromwhere);
		void ftello64_ocall([in,out] int *preturn,[in,size = 1] void *stream);
		void getwc_ocall([in,out] int *preturn,[in,size = 1] void* stream);
		void ungetwc_ocall([in,out] int *preturn,wint_t ch, [in,size = 1] void * stream);
		void fread_ocall([in,out] int *preturn,[in,size = count]void *buffer, size_t size, size_t count, [in] void **stream,[in,out] int *in_errno);
		void getrlimit_ocall([in,out] int *preturn,int resource, [in,size = 16] void *rlim);
		void setrlimit_ocall([in,out] int *preturn,int resource, [in,size = 16] const void *rlim);
		void strcpy_ocall([in,string] char *dest, [in,string] const char *src,[in,out,string] char *strcpy_tmp);
		void exit_ocall(int status_pid);
		void time_ocall([in,out] int *preturn,[in,size = 8] void *seconds);
		void localtime_r_ocall( [in,size = 8] const void *timer, [in,size = 56] void *buf ,[in,out,size = 56] void *localtime_r_tmp);
		void getpid_ocall([in,out] int *preturn);
		void sigemptyset_ocall([in,out] int *preturn,[in,size=128] void *set);
		void sigaddset_ocall([in,out] int *preturn,[in,size=128] void *set, int signo);
		void sigprocmask_ocall([in,out] int *preturn,int how,[in,size = 128] const void*set,[in,size = 128] void *oldset);
		void raise_ocall([in,out] int *preturn,int sig);	// not sure _setjmp_ocall 
		// void _setjmp_ocall([in, out] int *preturn, int env);
		void gethostname_ocall([in,out] int *preturn,[in,string] char *name, size_t len);
		void getsid_ocall([in,out] int *preturn,int pid);
		void open_ocall([in,out] int *preturn,[in,string] const char * pathname, int flags, int mode,[in,out] int *in_errno);
		void close_ocall([in,out] int *preturn,int fildes,[in,out] int *in_errno);
		void isatty_ocall([in,out] int *preturn,int fd,[in,out] int *in_errno);
		void lseek_ocall([in,out] int *preturn,int fd, int offset, int whence,[in,out] int *in_errno);
		void dlclose_ocall([in,out] int *preturn,[in,size = 1] void *handle);
		void uname_ocall([in,out] int *preturn,[in,size = 1] void *buf);
		// void munmap_ocall([in,out] int *preturn,[in,size = 1] void *start, size_t length);
		void munmap_ocall([in,out] int *preturn,[in] void **start, size_t length,[in,out] int *in_errno);
		void mprotect_ocall([in,out] int *preturn,[in,size = 1] void *addr, size_t len, int prot); // not sure mmap;
		void readlink_ocall([in,out] int *preturn,[in,string] char *path,[in,out,size = bufsize] char *buf,int bufsize,[in,out] int *in_errno);
		void __realpath_chk_ocall([in,string] const char *buf,[in,string] char *resolved, size_t resolvedlen,[in,out,string] char *__realpath_chk_tmp);
		void access_ocall([in,out] int *preturn,[in,string] const char *path, int amode,[in,out] int *in_errno);
		void chdir_ocall([in,out] int *preturn,[in,string] const char * path);
		void mkdir_ocall([in,out] int *preturn,[in,string] const char *path,int mode);
		void symlink_ocall([in,out] int *preturn,[in,string] const char *path1, [in,string] const char *path2);
		void link_ocall ([in,out] int *preturn,[in,string] const char * oldpath, [in,string] const char * newpath);
		void __lxstat_ocall ([in,out] int *preturn,int vers,[in,string]  const char *name, [in,size = 144]void *buf);
		void remove_ocall([in,out] int *preturn,[in,string] const char *filename,[in,out] int *in_errno);
		void putwc_ocall([in,out] int *preturn,wchar_t ch, [in,size = 1] void * stream);
		void uselocale_ocall([in, out, size=1]void *preturn, int newloc);
		//void fstat_ocall([in,out] int *preturn,int fd,[in,out,size = 144] void *buf,[in,out] int *in_errno);
		void fstat_ocall([in,out] int *preturn,int fd,[in,out,size = 288] void *buf,[in,out] int *in_errno);
		void printf_ocall();
		void ocall_print_string([in, string] const char *str);
		void posix_spawn_ocall([in,out] int * preturn,[out]int * pid,[in,string]const char *path,[in,size = 1]const void *file_actions,[in,size = 1]const void *attrp,[in,size = 1,count = argc] void *_argv,[in,size = 1,count = envc]void *_envp,int argc,int envc);
		void mmap_ocall([in,out] void **preturn, [in]void **addr, size_t length, int prot, int flags, int fd, int offset,[in,out] int *in_errno);
		void pthread_mutex_destroy_ocall([in,out]int *preturn,[in,out,size=40] void * mutex);
		void pthread_mutexattr_init_ocall([in,out]int *preturn,[in,out,size=4] void *attr);
		void pthread_mutexattr_destroy_ocall([in,out]int *preturn,[in,out,size=4] void *attr);
		void pthread_mutexattr_settype_ocall([in,out]int *preturn,[in,out,size=4]void *attr,int type);
		void pthread_mutexattr_setpshared_ocall([in,out] int *preturn,[in,out,size=4]void *attr,int pshared);
		void ioctl_ocall([in,out] int *preturn,int fd,unsigned long request,[user_check] void *arguments,[in,out] int *in_errno);
		void tigetnum_ocall([in,out] int *preturn,[in,string]char *capname,[in,out]int *in_errno);
	
	};
};